Credit:
Mark Harris - NVIDIA Corporation

Description:
A simple Jacobi iteration useful for teaching both the kerenels (or parallel) 
and data directives. There is some high-level timing code built-in to the 
program, but you may wish to also make use of a profiler when using this
example.

Files:
  Miscellaneous:
    timer.h - simple timing code
  Exercise:
    exercise.c - The serial C code lacking any OpenACC constructs
    exercise.f90 - The serial Fortran code lacking any OpenACC constructs
  Answer:
    answer.c - A simple OpenACC C ccelerated version of the code.
    answer.f90 - A simple OpenACC Fortran accelerated version of the code.

Compile:
Using the PGI compiler
pgcc -acc -Minfo=accel -o jacobi exercise.c
pgf90 -acc -Minfo=accel -o jacobi exercise.f90

Flow:
1. Introduce the serial version of Jacobi.  Have the students compile and 
run to get timing data
2. Have the students add the OpenACC kernels directive in the appropriate
place and recompile and run. At this point, without the data directive, they
should actually see a slow-down in performance. You can either show what's
happening with the compiler based profiling data, or use the NVIDIA Visual
Profiler to show what's going on with excessive data transfers
3. Have the students add the data directive in the appropriate place and
recompile and run. They should now see a substantial speed-up. You can also
prove what's happening by looking at the profile data again.

References:
For a description on what this Laplace2D code does, please see slides
located here: 
1. <add Jacobi slides>